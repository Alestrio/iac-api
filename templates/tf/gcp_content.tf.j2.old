provider "google" {
    project = local.project_id
    region = local.gcp_region
    credentials = "${file("../../../config/secrets/client_secret.json")}"
}

{% for net in networks %}
resource "google_compute_network" "{{net.name}}" {
    name = "{{net.name}}"
    auto_create_subnetworks = {{ "true" if net.subnet == [] else "false" }}
}

{% for firewall in net.firewalls%}
resource "google_compute_firewall" "{{firewall.name}}" {
    name = "{{firewall.name}}"
    network = "{{ net.name }}"
    # Get source ranges from rules within firewall and eliminate double entries
    source_ranges = [
        {% for rule in firewall.rules %}
        {% for source in rule.source_networks %}
        "{{ source }}"
        {% endfor %}
        {% endfor %}
    ]
    {% for rule in firewall.rules %}
    {% if rule.source_ranges != [] %}
        {#  allow or deny => class name to lower case #}
        {% for rule in firewall.rules %}
        {{ "allow" if firewall.is_allow else "deny" }} {
            ports = {{ rule.to_ports }}
            protocol = "{{ rule.protocol }}"
        }
{% endfor %}
{% endif %}
    {% if firewall.target_tags != [] %}
    target_tags = {{ firewall.target_tags }}
    {% endif %}
    priority = 1000
}
{% endfor %}

{% for subnet in net.subnetworks %}
resource "google_compute_subnetwork" "{{subnet.name}}" {
    name = "{{subnet.name}}"
    ip_cidr_range = "{{subnet.ip_cidr_range}}"
    network = "{{ net.name }}"
    region = "{{ net.zone }}"
    private_ip_google_access = "{{ subnet.private_ip_google_access }}"
}
{% endfor %}

{% endfor %}
{% for machine in machines %}
{% if 'gcp' in machine.providers %}
resource "google_compute_address" "{{ machine.address.name }}" {
    name = "{{ machine.address.name }}"
    {% if machine.address.address_type %}    address_type = "{{ machine.address.address_type }}"
    {% endif %}
    {% if machine.address.subnetwork_name %}     subnetwork = google_compute_subnetwork.{{ machine.address.subnetwork_name }}.id
    {% endif %}
    {% if machine.address.address %}    address = "{{ machine.address.address }}"
    {% endif %}
    {% if machine.address.gcp_region %}     region = "{{ machine.address.gcp_region }}"
    {% endif %}
}

resource "google_compute_instance" "{{ machine.name }}" {

    name = "{{ machine.name }}"
    machine_type = "{{ machine.gcp_type }}"
    zone = "{{ machine.gcp_zone }}"
    boot_disk {
        device_name = "{{ machine.name if machine.disks[0].name == "" else machine.disks[0].name }}"
        initialize_params {
            size = "{{ machine.disks[0].size }}"
            image = "{{ machine.gcp_machine_image }}"
        }
    }
    network_interface {
        network = "{{ machine.gcp_network.name if machine.gcp_network.name else machine.gcp_network }}"
        access_config {
            nat_ip = google_compute_address.{{ machine.address.name }}.address
        }
    }

    provisioner "remote-exec" {
        connection {
          type        = "ssh"
          user        = local.ssh_user
          private_key = file(local.private_key_path)
          host        = self.network_interface.0.access_config.0.nat_ip
        }

        inline = ["sudo apt-get install -y python-minimal python-setuptools"]
    }
    provisioner "local-exec" {
        command = "ansible-playbook -i ${self.network_interface.0.access_config.0.nat_ip} --private-key ${local.private_key_path} ../ansible_configs/{{ config_name }}.yaml"
    }
}
{% endif %}
{% endfor %}
{% endfor %}

